"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _button = require("./button");

var _button2 = _interopRequireDefault(_button);

var _annotation = require("./annotation");

var _annotation2 = _interopRequireDefault(_annotation);

var _findSelectButtonPosition = require("./functions/findSelectButtonPosition");

var _structureClientRectangle = require("./functions/structureClientRectangle");

var _findHoverButtonPosition = require("./functions/findHoverButtonPosition");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ReactAnnotateText(_ref) {
  var src = _ref.src,
      srcDoc = _ref.srcDoc,
      height = _ref.height,
      width = _ref.width,
      highlightData = _ref.highlightData,
      selectionPopup = _ref.selectionPopup,
      hoverPopup = _ref.hoverPopup,
      iframeTitle = _ref.iframeTitle;

  var iframeRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      currentSelectionData = _useState2[0],
      changeCurrentSelectionData = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      currentHoverData = _useState4[0],
      changeCurrentHoverData = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      buttonData = _useState6[0],
      changeButtonData = _useState6[1];

  var _useState7 = (0, _react.useState)({
    scrollY: 0,
    scrollX: 0
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      scrollPosition = _useState8[0],
      changeScrollPosition = _useState8[1];

  var onMouseUp = function onMouseUp() {
    var selection = iframeRef.current.contentWindow.getSelection();
    var selectionText = selection.toString();
    if (selectionText) {
      var clientRectangleArray = selection.getRangeAt(0).getClientRects();
      var position = (0, _structureClientRectangle.structureClientRectangle)(clientRectangleArray, scrollPosition);
      changeCurrentSelectionData({
        position: position,
        selectionText: selectionText
      });
      changeButtonData({
        type: "select",
        position: (0, _findSelectButtonPosition.findSelectButtonPosition)(position)
      });
    } else {
      clearButtonAndCurrentData();
    }
  };

  var onScroll = function onScroll() {
    changeScrollPosition({
      scrollY: iframeRef.current.contentWindow.scrollY,
      scrollX: iframeRef.current.contentWindow.scrollX
    });
  };

  var buttonContent = function buttonContent() {
    if (buttonData.type === "select") {
      return selectionPopup(currentSelectionData);
    } else if (buttonData.type === "hover") {
      return hoverPopup(currentHoverData);
    }
  };

  var hoverChange = function hoverChange(hoveredId) {
    if (hoveredId) {
      changeCurrentHoverData(hoveredId);
      changeButtonData({
        type: "hover",
        position: (0, _findHoverButtonPosition.findHoverButtonPosition)(hoveredId, highlightData)
      });
    } else {
      clearButtonAndCurrentData();
    }
  };

  var clearButtonAndCurrentData = function clearButtonAndCurrentData() {
    changeCurrentSelectionData(null);
    changeCurrentHoverData(null);
    changeButtonData(null);
  };

  var onIframeLoad = function onIframeLoad() {
    if (iframeRef.current) {
      iframeRef.current.contentDocument.addEventListener("scroll", onScroll);
      iframeRef.current.contentDocument.addEventListener("mouseup", onMouseUp);
    }
  };

  (0, _react.useEffect)(function () {
    return function () {
      if (iframeRef && iframeRef.current && iframeRef.current.contentDocument) {
        iframeRef.current.contentDocument.removeEventListener("scroll", onScroll);
        iframeRef.current.contentDocument.removeEventListener("mouseup", onMouseUp);
      }
    };
  }, []);

  return _react2.default.createElement(
    "div",
    {
      onMouseLeave: clearButtonAndCurrentData,
      style: {
        width: width,
        height: height,
        overflow: "hidden",
        position: "relative"
      }
    },
    _react2.default.createElement("iframe", {
      src: src,
      srcDoc: srcDoc,
      width: width,
      height: height,
      title: iframeTitle,
      ref: iframeRef,
      onLoad: onIframeLoad
    }),
    highlightData.length && _react2.default.createElement(_annotation2.default, {
      highlightData: highlightData,
      scrollPosition: scrollPosition,
      hoverChange: hoverChange
    }),
    buttonData && _react2.default.createElement(_button2.default, {
      buttonData: buttonData,
      scrollPosition: scrollPosition,
      content: buttonContent(),
      onButtonClick: clearButtonAndCurrentData
    })
  );
}

exports.default = ReactAnnotateText;