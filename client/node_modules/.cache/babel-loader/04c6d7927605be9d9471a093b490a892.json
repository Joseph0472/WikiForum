{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeStuff\\\\WikiForum\\\\WikiForum\\\\client\\\\src\\\\components\\\\fetcharticle.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nexport default class FetchArticle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      console.log(this.state);\n    };\n\n    this.state = {\n      wikiContent: ''\n    };\n  }\n\n  fetchArticle() {\n    var searchTerm = document.getElementById('inputSearchTerm').value;\n\n    if (searchTerm) {\n      $.ajax({\n        url: \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&titles=\" + searchTerm + \"&redirects=true\",\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        method: 'GET',\n        dataType: 'jsonp',\n        data: '',\n        success: function (data) {\n          console.log(data);\n          var dataNum = Object.keys(data.query.pages)[0];\n\n          if (dataNum == -1) {\n            alert(\"Wikipedia page not found, please confirm the key word. Please try to copy and paste the original title.\");\n          } else {\n            this.setState({\n              wikiContent: data.query.pages[dataNum].extract\n            });\n            $('#articleData').empty(); // $('#articleData').append(data.query.pages[dataNum].title)\n\n            $('#articleData').append(data.query.pages[dataNum].extract);\n          }\n        },\n        error: function (xhr, status, err) {\n          console.error('article not found');\n        }\n      });\n    }\n  } //TODO: Optimize the fetching process. Ideally, users can choose specific graph and the content. users should not edit the content.\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-field\",\n      type: \"text\",\n      placeholder: \"Enter a search term\",\n      id: \"inputSearchTerm\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn pink lighten-1 z-depth-0\",\n      id: \"fetch\",\n      onClick: () => this.fetchArticle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Fectch from Wikipedia\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"articleData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"state\"));\n  }\n\n}","map":{"version":3,"sources":["D:/CodeStuff/WikiForum/WikiForum/client/src/components/fetcharticle.js"],"names":["React","Component","$","FetchArticle","constructor","props","handleClick","console","log","state","wikiContent","fetchArticle","searchTerm","document","getElementById","value","ajax","url","headers","method","dataType","data","success","dataNum","Object","keys","query","pages","alert","setState","extract","empty","append","error","xhr","status","err","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAoC;AAC/CG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAOlBC,WAPkB,GAOJ,MAAM;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACH,KATiB;;AAEd,SAAKA,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAb;AAGH;;AAMDC,EAAAA,YAAY,GAAE;AACV,QAAIC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CC,KAA5D;;AACA,QAAGH,UAAH,EAAe;AACXV,MAAAA,CAAC,CAACc,IAAF,CAAO;AACHC,QAAAA,GAAG,EAAE,sFAAqFL,UAArF,GAAiG,iBADnG;AAEHM,QAAAA,OAAO,EAAE;AACL,yCAAgC,GAD3B;AAEL,0BAAiB;AAFZ,SAFN;AAMHC,QAAAA,MAAM,EAAE,KANL;AAOHC,QAAAA,QAAQ,EAAE,OAPP;AAQHC,QAAAA,IAAI,EAAE,EARH;AASHC,QAAAA,OAAO,EAAE,UAASD,IAAT,EAAe;AACpBd,UAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;AACA,cAAIE,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACK,KAAL,CAAWC,KAAvB,EAA8B,CAA9B,CAAd;;AACA,cAAGJ,OAAO,IAAI,CAAC,CAAf,EAAiB;AACbK,YAAAA,KAAK,CAAC,yGAAD,CAAL;AACH,WAFD,MAGK;AACD,iBAAKC,QAAL,CAAc;AACVnB,cAAAA,WAAW,EAAGW,IAAI,CAACK,KAAL,CAAWC,KAAX,CAAiBJ,OAAjB,EAA0BO;AAD9B,aAAd;AAGA5B,YAAAA,CAAC,CAAC,cAAD,CAAD,CAAkB6B,KAAlB,GAJC,CAKD;;AACA7B,YAAAA,CAAC,CAAC,cAAD,CAAD,CAAkB8B,MAAlB,CAAyBX,IAAI,CAACK,KAAL,CAAWC,KAAX,CAAiBJ,OAAjB,EAA0BO,OAAnD;AACH;AACJ,SAvBE;AAwBHG,QAAAA,KAAK,EAAE,UAASC,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2B;AAC9B7B,UAAAA,OAAO,CAAC0B,KAAR,CAAc,mBAAd;AACH;AA1BE,OAAP;AA4BH;AAER,GA7CkD,CA+C/C;;;AACAI,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,WAAW,EAAC,qBAAvD;AAA6E,MAAA,EAAE,EAAC,iBAAhF;AAAkG,MAAA,QAAQ,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAQ,MAAA,SAAS,EAAC,8BAAlB;AAAiD,MAAA,EAAE,EAAC,OAApD;AAA4D,MAAA,OAAO,EAAI,MAAM,KAAK1B,YAAL,EAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,eAGI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII;AAAQ,MAAA,OAAO,EAAI,KAAKL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,CADJ;AAQH;;AAzD8C","sourcesContent":["import React , {Component} from 'react'\r\nimport $ from 'jquery'\r\n\r\nexport default class FetchArticle extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            wikiContent: ''\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        console.log(this.state)\r\n    }\r\n\r\n    fetchArticle(){\r\n        var searchTerm = document.getElementById('inputSearchTerm').value;\r\n        if(searchTerm) {\r\n            $.ajax({\r\n                url: \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&titles=\"+ searchTerm +\"&redirects=true\",\r\n                headers: {\r\n                    'Access-Control-Allow-Origin' : '*',\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                method: 'GET',\r\n                dataType: 'jsonp',\r\n                data: '',\r\n                success: function(data) {\r\n                    console.log(data);\r\n                    var dataNum = Object.keys(data.query.pages)[0]\r\n                    if(dataNum == -1){\r\n                        alert(\"Wikipedia page not found, please confirm the key word. Please try to copy and paste the original title.\");\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            wikiContent : data.query.pages[dataNum].extract\r\n                        })\r\n                        $('#articleData').empty()\r\n                        // $('#articleData').append(data.query.pages[dataNum].title)\r\n                        $('#articleData').append(data.query.pages[dataNum].extract)\r\n                    }\r\n                },\r\n                error: function(xhr, status, err) {\r\n                    console.error('article not found');\r\n                }\r\n            });\r\n        }\r\n\r\n}\r\n    \r\n    //TODO: Optimize the fetching process. Ideally, users can choose specific graph and the content. users should not edit the content.\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input className=\"input-field\" type=\"text\" placeholder=\"Enter a search term\" id=\"inputSearchTerm\" required></input>\r\n                <button className=\"btn pink lighten-1 z-depth-0\" id=\"fetch\" onClick = {() => this.fetchArticle()}>Fectch from Wikipedia</button>\r\n                <div id=\"articleData\"></div>\r\n                <button onClick = {this.handleClick}>state</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}