{"ast":null,"code":"import { browserhistory } from 'react-router';\nimport { POSTING_ARTICLE_START, POSTING_ARTICLE_END, POSTING_ARTICLE_SUCCESS, POSTING_ARTICLE_FAILURE } from './action-types';\nimport { Article } from '../../../../server/db/schema';\nimport postArticle from '../../api/article'; // import { postDiscussionApi } from './api';\n\nexport const createArticle = article => {\n  return (dispatch, getState) => {\n    // halting dispach, make async call to db\n    postArticle(article).then(() => {\n      dispatch({\n        type: 'CREATE_ARTICLE',\n        article: article\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_ARTICLE_ERROR',\n        err: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Zorro/ReactTestFolder/wikiforumcs/client/src/redux/actions/articleactions.js"],"names":["browserhistory","POSTING_ARTICLE_START","POSTING_ARTICLE_END","POSTING_ARTICLE_SUCCESS","POSTING_ARTICLE_FAILURE","Article","postArticle","createArticle","article","dispatch","getState","then","type","catch","err"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,cAA7B;AACA,SACIC,qBADJ,EAEIC,mBAFJ,EAGIC,uBAHJ,EAIIC,uBAJJ,QAKO,gBALP;AAMA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CACA;;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACtC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3B;AACAJ,IAAAA,WAAW,CAACE,OAAD,CAAX,CAAqBG,IAArB,CAA0B,MAAI;AAC1BF,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAG,gBADF;AAELJ,QAAAA,OAAO,EAAGA;AAFL,OAAD,CAAR;AAIH,KALD,EAKGK,KALH,CAKUC,GAAD,IAAO;AACZL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAG,sBADF;AAELE,QAAAA,GAAG,EAAGA;AAFD,OAAD,CAAR;AAIH,KAVD;AAWH,GAbD;AAcH,CAfM","sourcesContent":["import {browserhistory} from 'react-router'\nimport {\n    POSTING_ARTICLE_START,\n    POSTING_ARTICLE_END,\n    POSTING_ARTICLE_SUCCESS,\n    POSTING_ARTICLE_FAILURE,\n} from './action-types'\nimport { Article } from '../../../../server/db/schema'\nimport postArticle from '../../api/article'\n// import { postDiscussionApi } from './api';\n\nexport const createArticle = (article) => {\n    return (dispatch, getState) => {\n        // halting dispach, make async call to db\n        postArticle(article).then(()=>{\n            dispatch({\n                type : 'CREATE_ARTICLE',\n                article : article\n            })\n        }).catch((err)=>{\n            dispatch({\n                type : 'CREATE_ARTICLE_ERROR',\n                err : err       \n            })\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}