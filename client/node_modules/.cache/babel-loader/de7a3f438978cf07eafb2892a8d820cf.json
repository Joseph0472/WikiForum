{"ast":null,"code":"/**\n * A helper function that creates the action types, redux actions, and thunk function for a thunk which performs some\n * API call and informs the Redux store on \"loading\", \"success\", and \"error\" states.\n * \n * @param {String} name the name of the thunk\n * @param {Function} apiCall the API function to call\n */\nexport default function createApiThunk(name, apiCall) {\n  // Create the action types\n  const actionTypes = {\n    loading: `${name}_loading`,\n    success: `${name}_success`,\n    error: `${name}_error`\n  }; // Create the Redux action functions\n\n  const reduxActions = {};\n\n  for (const actionType in actionTypes) {\n    reduxActions[actionType] = function (payload) {\n      return {\n        type: actionTypes[actionType],\n        payload\n      };\n    };\n  } // Create the thunk function, which itself will take the payload to the API call as an argument...\n\n\n  const thunk = payload => dispatch => {\n    // Dispatch the \"loading\" action with the payload that will be supplied to the API call\n    dispatch(reduxActions.loading(payload)); // Then call the API function with the given payload\n\n    apiCall(payload) // On success, dispatch the \"success\" action with the response from the server\n    .then(response => dispatch(reduxActions.success(response))) // On failure, dispatch the \"error\" action with the response from the server\n    .catch(err => dispatch(reduxActions.error(err.message || 'Unexpected error!')));\n  }; // Return an object containing all three parts of this.\n\n\n  return {\n    actionTypes,\n    reduxActions,\n    thunk\n  };\n}","map":{"version":3,"sources":["/Users/Joesph/React_Apps/wikiforum-v2.0/client/src/redux/actions/thunks/thunk-helper.js"],"names":["createApiThunk","name","apiCall","actionTypes","loading","success","error","reduxActions","actionType","payload","type","thunk","dispatch","then","response","catch","err","message"],"mappings":"AACA;;;;;;;AAOA,eAAe,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AAElD;AACA,QAAMC,WAAW,GAAG;AAChBC,IAAAA,OAAO,EAAG,GAAEH,IAAK,UADD;AAEhBI,IAAAA,OAAO,EAAG,GAAEJ,IAAK,UAFD;AAGhBK,IAAAA,KAAK,EAAG,GAAEL,IAAK;AAHC,GAApB,CAHkD,CASlD;;AACA,QAAMM,YAAY,GAAG,EAArB;;AACA,OAAK,MAAMC,UAAX,IAAyBL,WAAzB,EAAsC;AAClCI,IAAAA,YAAY,CAACC,UAAD,CAAZ,GAA2B,UAAUC,OAAV,EAAmB;AAC1C,aAAO;AAAEC,QAAAA,IAAI,EAAEP,WAAW,CAACK,UAAD,CAAnB;AAAiCC,QAAAA;AAAjC,OAAP;AACH,KAFD;AAGH,GAfiD,CAiBlD;;;AACA,QAAME,KAAK,GAAGF,OAAO,IAAIG,QAAQ,IAAI;AAEjC;AACAA,IAAAA,QAAQ,CAACL,YAAY,CAACH,OAAb,CAAqBK,OAArB,CAAD,CAAR,CAHiC,CAKjC;;AACAP,IAAAA,OAAO,CAACO,OAAD,CAAP,CAEI;AAFJ,KAGKI,IAHL,CAGUC,QAAQ,IAAIF,QAAQ,CAACL,YAAY,CAACF,OAAb,CAAqBS,QAArB,CAAD,CAH9B,EAKI;AALJ,KAMKC,KANL,CAMWC,GAAG,IAAIJ,QAAQ,CAACL,YAAY,CAACD,KAAb,CAAmBU,GAAG,CAACC,OAAJ,IAAe,mBAAlC,CAAD,CAN1B;AAOH,GAbD,CAlBkD,CAiClD;;;AACA,SAAO;AACHd,IAAAA,WADG;AAEHI,IAAAA,YAFG;AAGHI,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["\n/**\n * A helper function that creates the action types, redux actions, and thunk function for a thunk which performs some\n * API call and informs the Redux store on \"loading\", \"success\", and \"error\" states.\n * \n * @param {String} name the name of the thunk\n * @param {Function} apiCall the API function to call\n */\nexport default function createApiThunk(name, apiCall) {\n\n    // Create the action types\n    const actionTypes = {\n        loading: `${name}_loading`,\n        success: `${name}_success`,\n        error: `${name}_error`\n    }\n\n    // Create the Redux action functions\n    const reduxActions = {};\n    for (const actionType in actionTypes) {\n        reduxActions[actionType] = function (payload) {\n            return { type: actionTypes[actionType], payload }\n        };\n    }\n\n    // Create the thunk function, which itself will take the payload to the API call as an argument...\n    const thunk = payload => dispatch => {\n\n        // Dispatch the \"loading\" action with the payload that will be supplied to the API call\n        dispatch(reduxActions.loading(payload));\n\n        // Then call the API function with the given payload\n        apiCall(payload)\n\n            // On success, dispatch the \"success\" action with the response from the server\n            .then(response => dispatch(reduxActions.success(response)))\n\n            // On failure, dispatch the \"error\" action with the response from the server\n            .catch(err => dispatch(reduxActions.error(err.message || 'Unexpected error!')));\n    }\n\n    // Return an object containing all three parts of this.\n    return {\n        actionTypes,\n        reduxActions,\n        thunk\n    }\n}"]},"metadata":{},"sourceType":"module"}