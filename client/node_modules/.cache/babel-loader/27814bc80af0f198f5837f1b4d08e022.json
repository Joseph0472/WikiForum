{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodeStuff\\\\WikiForum\\\\WikiForum\\\\client\\\\src\\\\components\\\\fetcharticle.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nexport default class FetchArticle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wikiContent: ''\n    };\n\n    this.handleChange = e => {\n      // this.setState({\n      //     [e.target.id] : e.target.value\n      // })\n      console.log(e);\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        wikiContent: \"yest\"\n      });\n      console.log(this.state);\n    };\n  }\n\n  //TODO: Optimize the fetching process. Ideally, users can choose specific graph and the content. users should not edit the content.\n  render() {\n    function fetchArticle() {\n      var searchTerm = document.getElementById('inputSearchTerm').value;\n\n      if (searchTerm) {\n        $.ajax({\n          url: \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&titles=\" + searchTerm + \"&redirects=true\",\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Content-Type': 'application/json'\n          },\n          method: 'GET',\n          dataType: 'jsonp',\n          data: '',\n          success: function (data) {\n            console.log(data);\n            var dataNum = Object.keys(data.query.pages)[0];\n\n            if (dataNum == -1) {\n              alert(\"Wikipedia page not found, please confirm the key word. Please try to copy and paste the original title.\");\n            } else {\n              $('#articleData').empty(); // $('#articleData').append(data.query.pages[dataNum].title)\n\n              $('#articleData').append(data.query.pages[dataNum].extract);\n            }\n          },\n          error: function (xhr, status, err) {\n            console.error('article not found');\n          }\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-field\",\n      type: \"text\",\n      placeholder: \"Enter a search term\",\n      id: \"inputSearchTerm\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn pink lighten-1 z-depth-0\",\n      id: \"fetch\",\n      onClick: () => fetchArticle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"Fectch from Wikipedia\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"articleData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, \"state\"));\n  }\n\n}","map":{"version":3,"sources":["D:/CodeStuff/WikiForum/WikiForum/client/src/components/fetcharticle.js"],"names":["React","Component","$","FetchArticle","constructor","props","state","wikiContent","handleChange","e","console","log","handleClick","setState","render","fetchArticle","searchTerm","document","getElementById","value","ajax","url","headers","method","dataType","data","success","dataNum","Object","keys","query","pages","alert","empty","append","extract","error","xhr","status","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAoC;AAK/CG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAJlBC,KAIkB,GAJV;AACJC,MAAAA,WAAW,EAAE;AADT,KAIU;;AAAA,SAIlBC,YAJkB,GAIFC,CAAD,IAAO;AAClB;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,KATiB;;AAAA,SAWlBG,WAXkB,GAWJ,MAAM;AAChB,WAAKC,QAAL,CAAc;AACVN,QAAAA,WAAW,EAAC;AADF,OAAd;AAGAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AACH,KAhBiB;AAEjB;;AAgBD;AACAQ,EAAAA,MAAM,GAAE;AACJ,aAASC,YAAT,GAAuB;AACnB,UAAIC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CC,KAA5D;;AACA,UAAGH,UAAH,EAAe;AACXd,QAAAA,CAAC,CAACkB,IAAF,CAAO;AACHC,UAAAA,GAAG,EAAE,sFAAqFL,UAArF,GAAiG,iBADnG;AAEHM,UAAAA,OAAO,EAAE;AACL,2CAAgC,GAD3B;AAEL,4BAAiB;AAFZ,WAFN;AAMHC,UAAAA,MAAM,EAAE,KANL;AAOHC,UAAAA,QAAQ,EAAE,OAPP;AAQHC,UAAAA,IAAI,EAAE,EARH;AASHC,UAAAA,OAAO,EAAE,UAASD,IAAT,EAAe;AACpBf,YAAAA,OAAO,CAACC,GAAR,CAAYc,IAAZ;AAEA,gBAAIE,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACK,KAAL,CAAWC,KAAvB,EAA8B,CAA9B,CAAd;;AACA,gBAAGJ,OAAO,IAAI,CAAC,CAAf,EAAiB;AACbK,cAAAA,KAAK,CAAC,yGAAD,CAAL;AACH,aAFD,MAGK;AACD9B,cAAAA,CAAC,CAAC,cAAD,CAAD,CAAkB+B,KAAlB,GADC,CAED;;AACA/B,cAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBgC,MAAlB,CAAyBT,IAAI,CAACK,KAAL,CAAWC,KAAX,CAAiBJ,OAAjB,EAA0BQ,OAAnD;AACH;AACJ,WArBE;AAsBHC,UAAAA,KAAK,EAAE,UAASC,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2B;AAC9B7B,YAAAA,OAAO,CAAC0B,KAAR,CAAc,mBAAd;AACH;AAxBE,SAAP;AA0BH;AAER;;AACG,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAC,MAApC;AAA2C,MAAA,WAAW,EAAC,qBAAvD;AAA6E,MAAA,EAAE,EAAC,iBAAhF;AAAkG,MAAA,QAAQ,MAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAQ,MAAA,SAAS,EAAC,8BAAlB;AAAiD,MAAA,EAAE,EAAC,OAApD;AAA4D,MAAA,OAAO,EAAI,MAAMrB,YAAY,EAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,eAGI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII;AAAQ,MAAA,OAAO,EAAI,KAAKH,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,CADJ;AAQH;;AAjE8C","sourcesContent":["import React , {Component} from 'react'\r\nimport $ from 'jquery'\r\n\r\nexport default class FetchArticle extends Component{\r\n    state = {\r\n        wikiContent: ''\r\n    }\r\n    \r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    \r\n    handleChange = (e) => {\r\n        // this.setState({\r\n        //     [e.target.id] : e.target.value\r\n        // })\r\n        console.log(e)\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({\r\n            wikiContent:\"yest\"\r\n        })\r\n        console.log(this.state)\r\n    }\r\n    \r\n    //TODO: Optimize the fetching process. Ideally, users can choose specific graph and the content. users should not edit the content.\r\n    render(){\r\n        function fetchArticle(){\r\n            var searchTerm = document.getElementById('inputSearchTerm').value\r\n            if(searchTerm) {\r\n                $.ajax({\r\n                    url: \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&titles=\"+ searchTerm +\"&redirects=true\",\r\n                    headers: {\r\n                        'Access-Control-Allow-Origin' : '*',\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    method: 'GET',\r\n                    dataType: 'jsonp',\r\n                    data: '',\r\n                    success: function(data) {\r\n                        console.log(data)\r\n                        \r\n                        var dataNum = Object.keys(data.query.pages)[0]\r\n                        if(dataNum == -1){\r\n                            alert(\"Wikipedia page not found, please confirm the key word. Please try to copy and paste the original title.\");\r\n                        }\r\n                        else {\r\n                            $('#articleData').empty()\r\n                            // $('#articleData').append(data.query.pages[dataNum].title)\r\n                            $('#articleData').append(data.query.pages[dataNum].extract)\r\n                        }\r\n                    },\r\n                    error: function(xhr, status, err) {\r\n                        console.error('article not found');\r\n                    }\r\n                });\r\n            }\r\n\r\n    }\r\n        return(\r\n            <div>\r\n                <input className=\"input-field\" type=\"text\" placeholder=\"Enter a search term\" id=\"inputSearchTerm\" required></input>\r\n                <button className=\"btn pink lighten-1 z-depth-0\" id=\"fetch\" onClick = {() => fetchArticle()}>Fectch from Wikipedia</button>\r\n                <div id=\"articleData\"></div>\r\n                <button onClick = {this.handleClick}>state</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}