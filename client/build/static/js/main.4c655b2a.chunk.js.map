{"version":3,"sources":["components/fetcharticle.js","pages/contact-me.js","logo.svg","pages sync /^/.//.*$","components/nav.js","page-renderer.js","App.js","serviceWorker.js","index.js","pages/home.js","pages/login.js","pages/wikiforum.js"],"names":["FetchArticle","props","state","type","placeholder","id","onClick","searchTerm","document","getElementById","value","$","ajax","url","headers","method","dataType","data","success","dataNum","Object","keys","query","pages","console","log","empty","append","title","extract","error","xhr","status","err","fetchArticle","Component","ContactMe","module","exports","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","navLinks","path","Nav","user","useState","menuActive","setMenuActive","className","link","index","key","to","src","size","firstName","lastName","PageRenderer","page","component","require","default","React","createElement","warn","generatePage","useRouteMatch","params","App","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message","Home","Login","Wikiforum"],"mappings":"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","file":"static/js/main.4c655b2a.chunk.js","sourcesContent":["import React ,{Component} from 'react'\nimport $ from 'jquery'\n\nexport default class FetchArticle extends Component{\n    constructor(props){\n        super()\n        this.state = {}\n    }\n    \n    // Consider: use hook method to execute ajax request to fetch full article content\n    // Or use async fetch in serverside\n\n    render(){\n        function fetchArticle(){\n            var searchTerm = document.getElementById('inputSearchTerm').value\n            // console.log(searchTerm)\n            \n        $.ajax({\n            url: \"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&titles=\"+ searchTerm +\"&redirects=true\",\n            headers: {\n                'Access-Control-Allow-Origin' : '*',\n                'Content-Type' : 'application/json'\n            },\n            method: 'GET',\n            dataType: 'jsonp',\n            data: '',\n            success: function(data) {\n                // this.setState({data: data});   // notice\n                // console.log(data.query.pages)\n                var dataNum = Object.keys(data.query.pages)[0]\n                console.log(data.query.pages)\n                if(dataNum == -1){\n                    $('#articleData').empty()\n                    $('#articleData').append(`<h1>Sorry, no such article titiled by: ${data.query.pages[dataNum].title}, please try to search in Wikipedia and paste the article titile here.</h1>`)\n                }\n                else {\n                    $('#articleData').empty()\n                    $('#articleData').append(`<h1>${data.query.pages[dataNum].title}</h1>`)\n                    $('#articleData').append(data.query.pages[dataNum].extract)\n                }\n            },\n            error: function(xhr, status, err) {\n                console.error('article not found');\n            }\n        });\n    }\n        return(\n            <div>\n                <input type=\"text\" placeholder=\"Enter a search term\" id=\"inputSearchTerm\"></input>\n                <button type=\"submit\" id=\"fetch\" onClick={()=>fetchArticle()}>Fectch </button>\n                <div id=\"articleData\"></div>\n            </div>\n        )\n    }\n\n}","import React, { Component } from 'react'\nimport $ from 'jquery'\n\nimport FetchArticle from '../components/fetcharticle'\n//use this page to test the search func\n\n\nexport default function ContactMe(){\n\n    return (\n        <FetchArticle />\n    )\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./contact-me\": 124,\n\t\"./contact-me.js\": 124,\n\t\"./home\": 83,\n\t\"./home.js\": 83,\n\t\"./login\": 84,\n\t\"./login.js\": 84,\n\t\"./wikiforum\": 85,\n\t\"./wikiforum.js\": 85\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 147;","import React , {useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Avatar} from 'antd'\n\nconst navLinks = [\n    {\n        title: 'Home',\n        path: '/'\n    },\n    {\n        title: 'WikiForum',\n        path: '/wikiforum'\n    },\n    {\n        title: 'Contact-Me',\n        path: '/contact-me'\n    },\n    {\n        title: 'Login',\n        path: '/login'\n    }\n]\n\nexport default function Nav({user}){\n    const [menuActive, setMenuActive] = useState(false)\n\n    return (\n        <nav className=\"navigationbar\">\n            <span className=\"menu-title\">~WikiForum~</span>\n            <div className={`menu-content-container ${menuActive && 'active'}`}>  \n                <ul>\n                    { navLinks.map((link, index)=> (\n                        <li key={index}>\n                            <Link to={link.path}>{link.title}</Link>\n                        </li>\n                    ))}\n                </ul>\n                <span>\n                    <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" size={38}/>\n                        <span className=\"menu-avatar-name\">{`${user.firstName} ${user.lastName}`}</span>\n                </span>\n                {/* responsive component */}\n                <i className=\"ionicons icon ion-ios-menu\" onClick={()=>setMenuActive(!menuActive)}/>\n            </div>\n        </nav> \n    )\n}","import React from 'react'\nimport {useRouteMatch} from 'react-router-dom'\n\nconst generatePage = function(page){\n    const component = () => require(`./pages/${page}`).default\n    console.log(component)\n    // exception handleling : no certain page\n    try {        \n        //call hook method to go-on\n        return React.createElement(component())// create <component/>\n    } catch(error) {\n        console.warn(error)\n        return React.createElement(()=>'404')\n    }\n}\n\nexport default function PageRenderer(){\n    //page routing and render\n    const {\n        params : { page }\n    } = useRouteMatch()\n\n    // click on the navbar and this func is called to generate pages\n    return generatePage(page)\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\n\nimport Nav from './components/nav';\nimport PageRenderer from './page-renderer'\n\nfunction App() {\n  const user = {\n    firstName : 'Peng',\n    lastName : 'Jiang'\n  }\n  return (\n    <Router>\n    <div className=\"App\">\n      <Nav user={user}/>\n      <Switch>\n      {/* Render dynamic page without maintaining navlinks */}\n      <Route path='/:page' component={PageRenderer} />\n      <Route path=\"/\" render={() => <Redirect to=\"/home\"/>} />\n      <Route component={()=>'404'} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './assets/scss/base.scss'\nimport 'antd/dist/antd.css'\nimport '@quasar/extras/ionicons-v4/ionicons-v4.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\n\nexport default function Home(){\n    return (\n        <section className=\"container home\">hello111</section>\n         \n    )\n}","import React from 'react'\n\nexport default function Login(){\n    return (\n        <div>login page</div>\n    )\n}","import React from 'react'\nimport { render } from '@testing-library/react'\n\n// The wiki page should be implemted here\nexport default function Wikiforum(){\n        return (\n            <div>Wikiforum page</div>\n        )\n}"],"sourceRoot":""}